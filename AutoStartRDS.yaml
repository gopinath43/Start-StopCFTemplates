---
AWSTemplateFormatVersion: '2010-09-09'
Description: This CF used to setup Start RDS instances.
Parameters:
  Region:
    Description: Need to choose the region where your RDS there.
    Type: String
    Default: us-east-1
    AllowedValues:
    - us-east-1
    - us-east-2
    - us-west-1
    - us-west-2
    - ap-south-1
    - ap-southeast-1
    - ap-southeast-2
    - eu-west-1
Resources:
  ScheduledRule:
      Type: AWS::Events::Rule
      Properties:
        Description: "Going to trigger the lambda function on given time interval"
        ScheduleExpression: "cron(30 2 ? * MON *)"
        Name: "StartRDSInstanceAutoStartRule"
        State: "ENABLED"
        Targets:
          -
            Arn:
              Fn::GetAtt:
                - "StartRDSInstanceAutoStart"
                - "Arn"
            Id: "ScheduledRule"
  PermissionForEventsToInvokeLambda:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref "StartRDSInstanceAutoStart"
        Action: "lambda:InvokeFunction"
        Principal: "events.amazonaws.com"
        SourceArn:
          Fn::GetAtt:
            - "ScheduledRule"
            - "Arn"
  StartRDSInstanceAutoStart: #Lambda Function
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
            # this Code will help to schedule start the RDS databasrs using Lambda
            # Yesh 
            # Version -- 2.0

            import boto3
            import os
            import sys
            import time
            from datetime import datetime, timezone
            from time import gmtime, strftime

            def start_rds_all():
                region=os.environ['REGION']
                key=os.environ['KEY']
                value=os.environ['VALUE']
                client = boto3.client('rds', region_name=region)
                response = client.describe_db_instances()

                v_readReplica=[]
                for i in response['DBInstances']:
                    readReplica=i['ReadReplicaDBInstanceIdentifiers']
                    v_readReplica.extend(readReplica)

                for i in response['DBInstances']:
            #The if condition below filters aurora clusters from single instance databases as boto3 commands defer to start the aurora clusters.
                    if i['Engine'] not in ['aurora-mysql','aurora-postgresql']:
            #The if condition below filters Read replicas.
                        if i['DBInstanceIdentifier'] not in v_readReplica and len(i['ReadReplicaDBInstanceIdentifiers']) == 0:
                            arn=i['DBInstanceArn']
                            resp2=client.list_tags_for_resource(ResourceName=arn)
            #check if the RDS instance is part of the Auto-Shutdown group.
                            if 0==len(resp2['TagList']):
                                print('DB Instance {0} is not part of autoshutdown'.format(i['DBInstanceIdentifier']))
                            else:
                                for tag in resp2['TagList']:
                                    if tag['Key']==key and tag['Value']==value:
                                        if i['DBInstanceStatus'] == 'available':
                                            print('{0} DB instance is already available'.format(i['DBInstanceIdentifier']))
                                        elif i['DBInstanceStatus'] == 'stopped':
                                            client.start_db_instance(DBInstanceIdentifier = i['DBInstanceIdentifier'])
                                            print('Started DB Instance {0}'.format(i['DBInstanceIdentifier']))
                                        elif i['DBInstanceStatus']=='starting':
                                            print('DB Instance {0} is already in starting state'.format(i['DBInstanceIdentifier']))
                                        elif i['DBInstanceStatus']=='stopping':
                                            print('DB Instance {0} is in stopping state. Please wait before starting'.format(i['DBInstanceIdentifier']))
                                    elif tag['Key']!=key and tag['Value']!=value:
                                        print('DB instance {0} is not part of autoshutdown'.format(i['DBInstanceIdentifier']))
                                    elif len(tag['Key']) == 0 or len(tag['Value']) == 0:
                                        print('DB Instance {0} is not part of autoShutdown'.format(i['DBInstanceIdentifier']))
                        elif i['DBInstanceIdentifier'] in v_readReplica:
                            print('DB Instance {0} is a Read Replica.'.format(i['DBInstanceIdentifier']))
                        else:
                            print('DB Instance {0} has a read replica. Cannot shutdown & start a database with Read Replica'.format(i['DBInstanceIdentifier']))

                response=client.describe_db_clusters()
                for i in response['DBClusters']:
                    cluarn=i['DBClusterArn']
                    resp2=client.list_tags_for_resource(ResourceName=cluarn)
                    if 0==len(resp2['TagList']):
                        print('DB Cluster {0} is not part of autoshutdown'.format(i['DBClusterIdentifier']))
                    else:
                        for tag in resp2['TagList']:
                            if tag['Key']==key and tag['Value']==value:
                                if i['Status'] == 'available':
                                    print('{0} DB Cluster is already available'.format(i['DBClusterIdentifier']))
                                elif i['Status'] == 'stopped':
                                    client.start_db_cluster(DBClusterIdentifier=i['DBClusterIdentifier'])
                                    print('Started Cluster {0}'.format(i['DBClusterIdentifier']))
                                elif i['Status']=='starting':
                                    print('cluster {0} is already in starting state.'.format(i['DBClusterIdentifier']))
                                elif i['Status']=='stopping':
                                    print('cluster {0} is in stopping state. Please wait before starting'.format(i['DBClusterIdentifier']))
                            elif tag['Key'] != key and tag['Value'] != value:
                                print('DB Cluster {0} is not part of autoshutdown'.format(i['DBClusterIdentifier']))
                            else:
                                print('DB Instance {0} is not part of autoShutdown'.format(i['DBClusterIdentifier']))

            def lambda_handler(event, context):
                start_rds_all() 
  ###########################################################################
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      Tags:
        - Key: "Env"
          Value: "Internal"
      MemorySize: 128
      Timeout: '300'
      Environment:
        Variables:
          KEY: DEV-TEST
          REGION: !Ref Region
          VALUE: Auto-Shutdown
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: rdsstopstart
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - arn:aws:logs:*:*:*
          - Effect: Allow
            Action: "*"
            Resource: "*"
          - Effect: Allow
            Action:
            - rds:*
            Resource: "*"
